name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vprofile0811
  EKS_CLUSTER: gitopsProject-eks

jobs:
    Test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Run tests
              run: mvn test
            
            - name: checkstyle
              run: mvn checkstyle:checkstyle

            - name: Set up JDK 11
              uses: actions/setup-java@v3
              with:
                java-version: '11'
                distribution: 'temurin'
            
            - name: Set up SonarCloud Scanner
              uses: warchant/setup-sonar-scanner@v7
              
            - name: SonarQube Scan
              run: sonar-scanner
                -Dsonar.host.url=${{ secrets.SONAR_URL }}
                -Dsonar.login=${{ secrets.SONAR_TOKEN }}
                -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY}}
                -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
                -Dsonar.sources=./src
                -Dsonar.junit.reportPaths=./target/surefire-reports
                -Dsonar.jacoco.reportPaths=./target/jacoco.exec
                -Dsonar.checkstyle.reportPaths=./target/checkstyle-result.xml
                -Dsonar.java.binaries=./target/classes
            
            # - name: Sonar Quality Gate Check
            #   uses: sonarsource/sonarcloud-github-action@master
            #   timeout-minutes: 5
            #   env:
            #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #     SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
    BUILD_AND_PUSH_IMAGE:
        needs: Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            
            - name: Build, tag, and push image to Amazon ECR
              uses: appleboy/docker-ecr-action@master
              with:
                access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                region: ${{ env.AWS_REGION }}
                repo: ${{ env.ECR_REPOSITORY }}
                tags: latest, ${{ github.run_number }}
                daemon_off: false
                dockerfile: ./Dockerfile
                context: ./
    
    DEPLOY_TO_EKS:
        needs: BUILD_AND_PUSH_IMAGE
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}

            - name: Update kubeconfig
              run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}
            
            # - name: Print kubeconfig
            #   run: cat ~/.kube/config
            
            - name: login to ECR
              id: login-ecr
              run: kubectl create secret docker-registry regcred \
                   --docker-server=${{ secrets.REGISTRY }} \
                   --docker-username=AWS \
                   --docker-password=$(aws ecr get-login-password) \
                   --dry-run=client -o yaml | kubectl apply -f -
            - name: Deploy Helm
              uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
                cluster-name: ${{ env.EKS_CLUSTER }}
                chart-path: ./helm/gitOpsChart
                namespace: default
                values: "image=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},imagetag=${{ github.run_number }}"

                name: gitOps-stack